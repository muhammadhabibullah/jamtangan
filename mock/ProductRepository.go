// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "jamtangan/domain"

	mock "github.com/stretchr/testify/mock"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *ProductRepository) Create(_a0 context.Context, _a1 *domain.Product) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Product) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchByBrandID provides a mock function with given fields: _a0, _a1
func (_m *ProductRepository) FetchByBrandID(_a0 context.Context, _a1 int64) ([]domain.Product, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []domain.Product
	if rf, ok := ret.Get(0).(func(context.Context, int64) []domain.Product); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: _a0, _a1
func (_m *ProductRepository) GetByID(_a0 context.Context, _a1 int64) (domain.Product, error) {
	ret := _m.Called(_a0, _a1)

	var r0 domain.Product
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.Product); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
