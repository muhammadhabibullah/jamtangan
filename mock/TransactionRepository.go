// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "jamtangan/domain"

	mock "github.com/stretchr/testify/mock"
)

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1, _a2
func (_m *TransactionRepository) Create(_a0 context.Context, _a1 *domain.Transaction, _a2 []*domain.TransactionProduct) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Transaction, []*domain.TransactionProduct) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: _a0, _a1
func (_m *TransactionRepository) GetByID(_a0 context.Context, _a1 int64) (domain.Transaction, []domain.TransactionProduct, error) {
	ret := _m.Called(_a0, _a1)

	var r0 domain.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.Transaction); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(domain.Transaction)
	}

	var r1 []domain.TransactionProduct
	if rf, ok := ret.Get(1).(func(context.Context, int64) []domain.TransactionProduct); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]domain.TransactionProduct)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int64) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
