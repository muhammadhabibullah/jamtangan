// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "jamtangan/domain"

	mock "github.com/stretchr/testify/mock"
)

// AdminUseCase is an autogenerated mock type for the AdminUseCase type
type AdminUseCase struct {
	mock.Mock
}

// CreateBrand provides a mock function with given fields: ctx, brandName
func (_m *AdminUseCase) CreateBrand(ctx context.Context, brandName string) (domain.Brand, error) {
	ret := _m.Called(ctx, brandName)

	var r0 domain.Brand
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Brand); ok {
		r0 = rf(ctx, brandName)
	} else {
		r0 = ret.Get(0).(domain.Brand)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, brandName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProduct provides a mock function with given fields: ctx, product
func (_m *AdminUseCase) CreateProduct(ctx context.Context, product domain.Product) (domain.Product, error) {
	ret := _m.Called(ctx, product)

	var r0 domain.Product
	if rf, ok := ret.Get(0).(func(context.Context, domain.Product) domain.Product); ok {
		r0 = rf(ctx, product)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Product) error); ok {
		r1 = rf(ctx, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByID provides a mock function with given fields: ctx, id
func (_m *AdminUseCase) GetProductByID(ctx context.Context, id int64) (domain.Product, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.Product
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.Product); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
